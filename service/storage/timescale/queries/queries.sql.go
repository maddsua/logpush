// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const getEntriesRange = `-- name: GetEntriesRange :many
select id, time, stream_tag, level, message, labels, meta, tx_id from entries
where time >= $1
	and time <= $2
`

type GetEntriesRangeParams struct {
	RangeFrom time.Time
	RangeTo   time.Time
}

func (q *Queries) GetEntriesRange(ctx context.Context, arg GetEntriesRangeParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, getEntriesRange, arg.RangeFrom, arg.RangeTo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.Time,
			&i.StreamTag,
			&i.Level,
			&i.Message,
			&i.Labels,
			&i.Meta,
			&i.TxID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertEntry = `-- name: InsertEntry :exec
insert into entries (
	time,
	level,
	message,
	labels,
	meta,
	tx_id,
	stream_tag
) values (
	$1,
	$2,
	$3,
	$4,
	$5,
	$6,
	$7
)
`

type InsertEntryParams struct {
	Time      time.Time
	Level     string
	Message   string
	Labels    sql.Null[[]byte]
	Meta      sql.Null[[]byte]
	TxID      sql.NullString
	StreamTag string
}

func (q *Queries) InsertEntry(ctx context.Context, arg InsertEntryParams) error {
	_, err := q.db.ExecContext(ctx, insertEntry,
		arg.Time,
		arg.Level,
		arg.Message,
		arg.Labels,
		arg.Meta,
		arg.TxID,
		arg.StreamTag,
	)
	return err
}
